stages:
  - build
  - test
  - docker
  - deploy

variables:

###################
### Build stage ###
###################
backend-build:
  stage: build
  image: node:alpine
  script:
    - echo "Start building backend"
    - npm install
    - echo "Build backend successfully!"
    - npm install express --save
    - npm install --save-dev jest supertest
  cache:
    paths:
      - node_modules/
  artifacts:
    paths:
      - build/
      - node_modules/

##################
### Test stage ###
##################
backend-test:
  stage: test
  image: node:alpine
  script:
    - echo "Start testing backend"
    - npm run test
    - echo "Test backend successfully!"

####################
### Docker stage ###
####################
backend-docker:
  stage: docker
  image: docker:stable
  services:
    - docker:dind
  script:
    - echo "Start building docker"
    - docker login -u $CI_REGISTRY_USER -p $DOCKER_REGISTRY_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - echo "Building docker successfully!"

####################
### Deploy stage ###
####################
backend-deploy:
  stage: deploy
  image: gitlab/dind:latest
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY_PRIVATE_GCE" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - 'echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh ${GCE_LOGIN_USER}@${GCP_VM_HOST} "docker images && docker ps -a"
    - ssh ${GCE_LOGIN_USER}@${GCP_VM_HOST} "bash ~/clear-docker.sh backend-example $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
    - ssh ${GCE_LOGIN_USER}@${GCP_VM_HOST} "docker run -d --name backend-example -p 3000:3000 $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
